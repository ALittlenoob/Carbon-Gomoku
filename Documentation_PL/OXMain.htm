<HTML>
<HEAD>
  <META http-equiv="Content-Type" content="text/html; charset=windows-1250">
  <TITLE>
    Dokumentacja programu Carbon Gomoku - Modu³ g³ówny
  </TITLE>
</HEAD>
<BODY BGCOLOR = WHITE>
<H1>Modu³ g³ówny</H1>
<HR>

<H2>Pliki</H2>
OXMain.cpp

<H2>Opis</H2>
Modu³ g³ówny zawiera funkcje WinAPI okna g³ównego, okna dialogowego
"NewGame" i "Log" oraz funkcje obs³uguj¹ce zdarzenia w tych oknach. WskaŸnik
<tt>currPlayer</tt>wskazuje na obiekt klasy <tt>AIPlayer</tt> reprezentuj¹cy
gracza, który w danej chwili ma wykonaæ ruch. Je¿eli <tt>currPlayer==0</tt>
to znaczy, ¿e ruch nale¿y do cz³owieka. Wtedy naciœniêcie lewego klawisza
myszy w obszarze planszy powoduje wys³anie komunikatu u¿ytkownika
WM_PERFORM_MOVE, który powoduje wykonanie ruchu. W przypadku, gdy kolejny
ruch nale¿y do komputera, uruchomiany jest osobny w¹tek <tt>AIThreadProc</tt>,
na którego zakoñczenie wysy³any jest komunikat WM_PERFORM_MOVE itd.

<H2>Procedury okien</H2>
<TABLE BORDER>

<TR><TD VALIGN = TOP><PRE>LRESULT CALLBACK MainWndProc
(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);</B>
<TD>Procedura okna g³ównego.
<TR><TD VALIGN = TOP><PRE>BOOL CALLBACK NewGameDialogProc
(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);</B>
<TD>Procedura okna dialogowego "NewGame".
<TR><TD VALIGN = TOP><PRE>BOOL CALLBACK LogDialogProc
(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
<TD>Procedura okna dialogowego "Log".

</TABLE>

<H2>Dane globalne dotycz¹ce interface'u</H2>

<TABLE BORDER>
<TR><TD><PRE>const LPSTR lpszMainWndClassName<TD>Nazwa klasy okna.
<TR><TD><PRE>const int   cellSize<TD>Rozmiar komórki planszy w pikselach.
<TR><TD><PRE>HINSTANCE   ghInstance<TD>Uchwyt instancji programu.
<TR><TD><PRE>HMENU       hMenu<TD>Uchwyt menu.
<TR><TD><PRE>DWORD       aiThreadId<TD>Identyfikator w¹tku AI.
<TR><TD><PRE>HANDLE      hAiThread<TD>Uchwyt w¹tku AI.
<TR><TD><PRE>bool        aiThinking<TD>Czy komputer myœli w tej chwili?
<TR><TD><PRE>HWND        hWndLog<TD>Uchwyt okna logowania.
<TR><TD><PRE>RECT        clientRect<TD>Obszar okna
<TR><TD><PRE>#define     clientWidth<TD>Szerokoœæ okna
<TR><TD><PRE>#define     clientHeight<TD>Wysokoœæ okna

</TABLE>

<H2>Dane globalne dotycz¹ce stanu gry</H2>

<TABLE BORDER>
<TR><TD><PRE>const int  boardSize;<TD>Rozmiar planszy.
<TR><TD><PRE>const char playerName[][32];<TD>Nazwy algorytmów AI.
<TR><TD><PRE>const int  playerCount;<TD>Liczba algorytmów AI.
<TR><TD><PRE>OXGame     game;<TD>Stan gry.
<TR><TD><PRE>AIPlayer   *playerO, *playerX<TD>WskaŸniki do graczy AI, wartoœæ <tt>NULL</tt> oznacza cz³owieka.
<TR><TD><PRE>AIPlayer   *currPlayer<TD>Wskazuje bie¿¹cego gracza (równe <tt>playerO</tt> albo <tt>playerX</tt>).
<TR><TD><PRE>int        iPlayerO, iPlayerX;<TD>Indeksy do tablicy nazw <tt>playerName</tt>.
<TR><TD><PRE>int        oSearchDepth, oTimeLimit;<TD>Parametry dla gracza O: g³êbokoœæ przeszukiwania, limit czasu.
<TR><TD><PRE>int        xSearchDepth, xTimeLimit;<TD>Parametry dla gracza X.
</TABLE>

<H2>Funkcje modyfikuj¹ce stan gry</H2>

<TABLE BORDER>
<TR><TD VALIGN = TOP><PRE>void  NewPlayer(AIPlayer *&player, int playerIndex);<TD>Tworzy obiekt odpowiedniej klasy pochodnej <tt>AIPlayer</tt>, w zale¿noœci od <tt>playerIndex</tt>, który jest indeksem do tablicy <tt>playerName</tt>.
<TR><TD VALIGN = TOP><PRE>void  StartNewGame(HWND hWnd);<TD>Rozpoczyna now¹ grê.
<TR><TD VALIGN = TOP><PRE>void  PerformMove(HWND hWnd, int x, int y);<TD>Wykonuje ruch na pole (x, y).
<TR><TD VALIGN = TOP><PRE>DWORD AIThreadProc(LPVOID param);<TD>Procedura w¹tku realizuj¹cego algorytm AI. Uchwyt okna g³ównego przekazywany jest przez <tt>param</tt>.
</TABLE>

<H2>Funkcje obs³uguj¹ce zdarzenia WinAPI</H2>
Parametr hWnd to zawsze uchwyt do okna g³ównego.

<TABLE BORDER>
<TR><TD VALIGN = TOP><PRE>void RestoreSize(HWND hWnd, RECT *pRect);
<TD>Przywraca pRect poprawne wartoœci rozmiarów okna g³ównego.
<TR><TD VALIGN = TOP><PRE>void RestoreSize(HWND hWnd);
<TD>Przywraca poprawny rozmiar okna g³ównego.
<TR><TD VALIGN = TOP><PRE>void OnCreate(HWND hWnd);
<TD>Wywo³ywane w momencie uruchomienia programu.
<TR><TD VALIGN = TOP><PRE>void OnCommand(HWND hWnd, WPARAM wParam);
<TD>U¿ycie poleñ z menu.
<TR><TD VALIGN = TOP><PRE>void OnLeftClick(HWND hWnd, int x, int y);
<TD>Naciœniêcie lewego klawisza myszy na planszy w punkcie (x, y).
<TR><TD VALIGN = TOP><PRE>void OnRightClick(HWND hWnd, int x, int y);
<TD>U¿ywane do debuggowania.
<TR><TD VALIGN = TOP><PRE>void OnPaint(HWND hWnd);
<TD>Rysowanie planszy.
<TR><TD VALIGN = TOP><PRE>void OnMove(HWND hWnd, int cx, int cy);
<TD>Obs³uga komunikatu u¿ytkownika <tt>WM_PERFORM_MOVE</tt> - ruch na pole (cx, cy).
<TR><TD VALIGN = TOP><PRE>void InvalidateCell(HWND hWnd, int cx, int cy);
<TD>Powoduje odrysowanie pola (cx, cy).

</TABLE>

<H2>Funkcje obs³uguj¹ce okienko dialogowe "NewGame"</H2>
Parametr hWnd to zawsze uchwyt do okna NewGame.

<TABLE BORDER>

<TR><TD VALIGN = TOP><PRE>void OnInitDialog(HWND hWnd);
<TD>Inicjowanie w momencie wywo³ania okna.

<TR><TD VALIGN = TOP><PRE>void SwitchPlayers(HWND hWnd);
<TD>Zamienia ustawienia graczy.

<TR><TD VALIGN = TOP><PRE>void UpdateControls(HWND hWnd);
<TD>Ustala wartoœci pozycji elementów kontrolnych zgodnie z danymi globalnymi.

<TR><TD VALIGN = TOP><PRE>void GetValues(HWND hWnd);
<TD>Zapamiêtuje wartoœci elementów kontrolnych w zmiennych globalnych.
</TABLE>

<H2>Funkcje obs³uguj¹ce okienko dialogowe "Log"</H2>

<TABLE BORDER>

<TR><TD VALIGN = TOP><PRE>void ClearDialog(HWND hWnd);
<TD>Czysci okno logowania. Parametr hWnd - uchwyt okna Log.
<TR><TD VALIGN = TOP><PRE>void WriteLog(int points, int nSearched, int speed);
<TD>Wypisuje informacje: liczbê punktów, liczbê przeszukanych ruchów, szybkoœæ analizy.
</TABLE>

</BODY>
